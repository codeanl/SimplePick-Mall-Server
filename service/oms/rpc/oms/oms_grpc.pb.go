// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: oms.proto

package oms

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Oms_OrderAdd_FullMethodName    = "/oms.Oms/OrderAdd"
	Oms_OrderList_FullMethodName   = "/oms.Oms/OrderList"
	Oms_OrderUpdate_FullMethodName = "/oms.Oms/OrderUpdate"
	Oms_OrderDelete_FullMethodName = "/oms.Oms/OrderDelete"
)

// OmsClient is the client API for Oms service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OmsClient interface {
	// 添加订单
	OrderAdd(ctx context.Context, in *OrderAddReq, opts ...grpc.CallOption) (*OrderAddResp, error)
	// 订单列表
	OrderList(ctx context.Context, in *OrderListReq, opts ...grpc.CallOption) (*OrderListResp, error)
	// 更新订单
	OrderUpdate(ctx context.Context, in *OrderUpdateReq, opts ...grpc.CallOption) (*OrderUpdateResp, error)
	// 删除订单
	OrderDelete(ctx context.Context, in *OrderDeleteReq, opts ...grpc.CallOption) (*OrderDeleteResp, error)
}

type omsClient struct {
	cc grpc.ClientConnInterface
}

func NewOmsClient(cc grpc.ClientConnInterface) OmsClient {
	return &omsClient{cc}
}

func (c *omsClient) OrderAdd(ctx context.Context, in *OrderAddReq, opts ...grpc.CallOption) (*OrderAddResp, error) {
	out := new(OrderAddResp)
	err := c.cc.Invoke(ctx, Oms_OrderAdd_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *omsClient) OrderList(ctx context.Context, in *OrderListReq, opts ...grpc.CallOption) (*OrderListResp, error) {
	out := new(OrderListResp)
	err := c.cc.Invoke(ctx, Oms_OrderList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *omsClient) OrderUpdate(ctx context.Context, in *OrderUpdateReq, opts ...grpc.CallOption) (*OrderUpdateResp, error) {
	out := new(OrderUpdateResp)
	err := c.cc.Invoke(ctx, Oms_OrderUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *omsClient) OrderDelete(ctx context.Context, in *OrderDeleteReq, opts ...grpc.CallOption) (*OrderDeleteResp, error) {
	out := new(OrderDeleteResp)
	err := c.cc.Invoke(ctx, Oms_OrderDelete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OmsServer is the server API for Oms service.
// All implementations must embed UnimplementedOmsServer
// for forward compatibility
type OmsServer interface {
	// 添加订单
	OrderAdd(context.Context, *OrderAddReq) (*OrderAddResp, error)
	// 订单列表
	OrderList(context.Context, *OrderListReq) (*OrderListResp, error)
	// 更新订单
	OrderUpdate(context.Context, *OrderUpdateReq) (*OrderUpdateResp, error)
	// 删除订单
	OrderDelete(context.Context, *OrderDeleteReq) (*OrderDeleteResp, error)
	mustEmbedUnimplementedOmsServer()
}

// UnimplementedOmsServer must be embedded to have forward compatible implementations.
type UnimplementedOmsServer struct {
}

func (UnimplementedOmsServer) OrderAdd(context.Context, *OrderAddReq) (*OrderAddResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrderAdd not implemented")
}
func (UnimplementedOmsServer) OrderList(context.Context, *OrderListReq) (*OrderListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrderList not implemented")
}
func (UnimplementedOmsServer) OrderUpdate(context.Context, *OrderUpdateReq) (*OrderUpdateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrderUpdate not implemented")
}
func (UnimplementedOmsServer) OrderDelete(context.Context, *OrderDeleteReq) (*OrderDeleteResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrderDelete not implemented")
}
func (UnimplementedOmsServer) mustEmbedUnimplementedOmsServer() {}

// UnsafeOmsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OmsServer will
// result in compilation errors.
type UnsafeOmsServer interface {
	mustEmbedUnimplementedOmsServer()
}

func RegisterOmsServer(s grpc.ServiceRegistrar, srv OmsServer) {
	s.RegisterService(&Oms_ServiceDesc, srv)
}

func _Oms_OrderAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderAddReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OmsServer).OrderAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Oms_OrderAdd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OmsServer).OrderAdd(ctx, req.(*OrderAddReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Oms_OrderList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OmsServer).OrderList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Oms_OrderList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OmsServer).OrderList(ctx, req.(*OrderListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Oms_OrderUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OmsServer).OrderUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Oms_OrderUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OmsServer).OrderUpdate(ctx, req.(*OrderUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Oms_OrderDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OmsServer).OrderDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Oms_OrderDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OmsServer).OrderDelete(ctx, req.(*OrderDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Oms_ServiceDesc is the grpc.ServiceDesc for Oms service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Oms_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "oms.Oms",
	HandlerType: (*OmsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "OrderAdd",
			Handler:    _Oms_OrderAdd_Handler,
		},
		{
			MethodName: "OrderList",
			Handler:    _Oms_OrderList_Handler,
		},
		{
			MethodName: "OrderUpdate",
			Handler:    _Oms_OrderUpdate_Handler,
		},
		{
			MethodName: "OrderDelete",
			Handler:    _Oms_OrderDelete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "oms.proto",
}
