// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: oms.proto

package oms

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Oms_OrderAdd_FullMethodName           = "/oms.Oms/OrderAdd"
	Oms_OrderList_FullMethodName          = "/oms.Oms/OrderList"
	Oms_OrderUpdate_FullMethodName        = "/oms.Oms/OrderUpdate"
	Oms_OrderDelete_FullMethodName        = "/oms.Oms/OrderDelete"
	Oms_OrderInfo_FullMethodName          = "/oms.Oms/OrderInfo"
	Oms_ReturnReasonAdd_FullMethodName    = "/oms.Oms/ReturnReasonAdd"
	Oms_ReturnReasonUpdate_FullMethodName = "/oms.Oms/ReturnReasonUpdate"
	Oms_ReturnReasonList_FullMethodName   = "/oms.Oms/ReturnReasonList"
	Oms_ReturnReasonDelete_FullMethodName = "/oms.Oms/ReturnReasonDelete"
	Oms_ReturnApplyAdd_FullMethodName     = "/oms.Oms/ReturnApplyAdd"
	Oms_ReturnApplyUpdate_FullMethodName  = "/oms.Oms/ReturnApplyUpdate"
	Oms_ReturnApplyList_FullMethodName    = "/oms.Oms/ReturnApplyList"
	Oms_ReturnApplyDelete_FullMethodName  = "/oms.Oms/ReturnApplyDelete"
	Oms_CartAdd_FullMethodName            = "/oms.Oms/CartAdd"
	Oms_CartUpdate_FullMethodName         = "/oms.Oms/CartUpdate"
	Oms_CartList_FullMethodName           = "/oms.Oms/CartList"
	Oms_CartDelete_FullMethodName         = "/oms.Oms/CartDelete"
)

// OmsClient is the client API for Oms service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OmsClient interface {
	// 添加订单
	OrderAdd(ctx context.Context, in *OrderAddReq, opts ...grpc.CallOption) (*OrderAddResp, error)
	// 订单列表
	OrderList(ctx context.Context, in *OrderListReq, opts ...grpc.CallOption) (*OrderListResp, error)
	// 更新订单
	OrderUpdate(ctx context.Context, in *OrderUpdateReq, opts ...grpc.CallOption) (*OrderUpdateResp, error)
	// 删除订单
	OrderDelete(ctx context.Context, in *OrderDeleteReq, opts ...grpc.CallOption) (*OrderDeleteResp, error)
	// 订单详情
	OrderInfo(ctx context.Context, in *OrderInfoReq, opts ...grpc.CallOption) (*OrderInfoResp, error)
	// 添加退货原因
	ReturnReasonAdd(ctx context.Context, in *ReturnReasonAddReq, opts ...grpc.CallOption) (*ReturnReasonAddResp, error)
	// 更新退货原因
	ReturnReasonUpdate(ctx context.Context, in *ReturnReasonUpdateReq, opts ...grpc.CallOption) (*ReturnReasonUpdateResp, error)
	// 退货原因列表
	ReturnReasonList(ctx context.Context, in *ReturnReasonListReq, opts ...grpc.CallOption) (*ReturnReasonListResp, error)
	// 删除退货原因
	ReturnReasonDelete(ctx context.Context, in *ReturnReasonDeleteReq, opts ...grpc.CallOption) (*ReturnReasonDeleteResp, error)
	// 添加退货
	ReturnApplyAdd(ctx context.Context, in *ReturnApplyAddReq, opts ...grpc.CallOption) (*ReturnApplyAddResp, error)
	// 更新退货
	ReturnApplyUpdate(ctx context.Context, in *ReturnApplyUpdateReq, opts ...grpc.CallOption) (*ReturnApplyUpdateResp, error)
	// 退货列表
	ReturnApplyList(ctx context.Context, in *ReturnApplyListReq, opts ...grpc.CallOption) (*ReturnApplyListResp, error)
	// 删除退货
	ReturnApplyDelete(ctx context.Context, in *ReturnApplyDeleteReq, opts ...grpc.CallOption) (*ReturnApplyDeleteResp, error)
	// 添加购物车
	CartAdd(ctx context.Context, in *CartAddReq, opts ...grpc.CallOption) (*CartAddResp, error)
	// 更新购物车
	CartUpdate(ctx context.Context, in *CartUpdateReq, opts ...grpc.CallOption) (*CartUpdateResp, error)
	// 购物车列表
	CartList(ctx context.Context, in *CartListReq, opts ...grpc.CallOption) (*CartListResp, error)
	// 删除购物车
	CartDelete(ctx context.Context, in *CartDeleteReq, opts ...grpc.CallOption) (*CartDeleteResp, error)
}

type omsClient struct {
	cc grpc.ClientConnInterface
}

func NewOmsClient(cc grpc.ClientConnInterface) OmsClient {
	return &omsClient{cc}
}

func (c *omsClient) OrderAdd(ctx context.Context, in *OrderAddReq, opts ...grpc.CallOption) (*OrderAddResp, error) {
	out := new(OrderAddResp)
	err := c.cc.Invoke(ctx, Oms_OrderAdd_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *omsClient) OrderList(ctx context.Context, in *OrderListReq, opts ...grpc.CallOption) (*OrderListResp, error) {
	out := new(OrderListResp)
	err := c.cc.Invoke(ctx, Oms_OrderList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *omsClient) OrderUpdate(ctx context.Context, in *OrderUpdateReq, opts ...grpc.CallOption) (*OrderUpdateResp, error) {
	out := new(OrderUpdateResp)
	err := c.cc.Invoke(ctx, Oms_OrderUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *omsClient) OrderDelete(ctx context.Context, in *OrderDeleteReq, opts ...grpc.CallOption) (*OrderDeleteResp, error) {
	out := new(OrderDeleteResp)
	err := c.cc.Invoke(ctx, Oms_OrderDelete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *omsClient) OrderInfo(ctx context.Context, in *OrderInfoReq, opts ...grpc.CallOption) (*OrderInfoResp, error) {
	out := new(OrderInfoResp)
	err := c.cc.Invoke(ctx, Oms_OrderInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *omsClient) ReturnReasonAdd(ctx context.Context, in *ReturnReasonAddReq, opts ...grpc.CallOption) (*ReturnReasonAddResp, error) {
	out := new(ReturnReasonAddResp)
	err := c.cc.Invoke(ctx, Oms_ReturnReasonAdd_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *omsClient) ReturnReasonUpdate(ctx context.Context, in *ReturnReasonUpdateReq, opts ...grpc.CallOption) (*ReturnReasonUpdateResp, error) {
	out := new(ReturnReasonUpdateResp)
	err := c.cc.Invoke(ctx, Oms_ReturnReasonUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *omsClient) ReturnReasonList(ctx context.Context, in *ReturnReasonListReq, opts ...grpc.CallOption) (*ReturnReasonListResp, error) {
	out := new(ReturnReasonListResp)
	err := c.cc.Invoke(ctx, Oms_ReturnReasonList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *omsClient) ReturnReasonDelete(ctx context.Context, in *ReturnReasonDeleteReq, opts ...grpc.CallOption) (*ReturnReasonDeleteResp, error) {
	out := new(ReturnReasonDeleteResp)
	err := c.cc.Invoke(ctx, Oms_ReturnReasonDelete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *omsClient) ReturnApplyAdd(ctx context.Context, in *ReturnApplyAddReq, opts ...grpc.CallOption) (*ReturnApplyAddResp, error) {
	out := new(ReturnApplyAddResp)
	err := c.cc.Invoke(ctx, Oms_ReturnApplyAdd_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *omsClient) ReturnApplyUpdate(ctx context.Context, in *ReturnApplyUpdateReq, opts ...grpc.CallOption) (*ReturnApplyUpdateResp, error) {
	out := new(ReturnApplyUpdateResp)
	err := c.cc.Invoke(ctx, Oms_ReturnApplyUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *omsClient) ReturnApplyList(ctx context.Context, in *ReturnApplyListReq, opts ...grpc.CallOption) (*ReturnApplyListResp, error) {
	out := new(ReturnApplyListResp)
	err := c.cc.Invoke(ctx, Oms_ReturnApplyList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *omsClient) ReturnApplyDelete(ctx context.Context, in *ReturnApplyDeleteReq, opts ...grpc.CallOption) (*ReturnApplyDeleteResp, error) {
	out := new(ReturnApplyDeleteResp)
	err := c.cc.Invoke(ctx, Oms_ReturnApplyDelete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *omsClient) CartAdd(ctx context.Context, in *CartAddReq, opts ...grpc.CallOption) (*CartAddResp, error) {
	out := new(CartAddResp)
	err := c.cc.Invoke(ctx, Oms_CartAdd_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *omsClient) CartUpdate(ctx context.Context, in *CartUpdateReq, opts ...grpc.CallOption) (*CartUpdateResp, error) {
	out := new(CartUpdateResp)
	err := c.cc.Invoke(ctx, Oms_CartUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *omsClient) CartList(ctx context.Context, in *CartListReq, opts ...grpc.CallOption) (*CartListResp, error) {
	out := new(CartListResp)
	err := c.cc.Invoke(ctx, Oms_CartList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *omsClient) CartDelete(ctx context.Context, in *CartDeleteReq, opts ...grpc.CallOption) (*CartDeleteResp, error) {
	out := new(CartDeleteResp)
	err := c.cc.Invoke(ctx, Oms_CartDelete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OmsServer is the server API for Oms service.
// All implementations must embed UnimplementedOmsServer
// for forward compatibility
type OmsServer interface {
	// 添加订单
	OrderAdd(context.Context, *OrderAddReq) (*OrderAddResp, error)
	// 订单列表
	OrderList(context.Context, *OrderListReq) (*OrderListResp, error)
	// 更新订单
	OrderUpdate(context.Context, *OrderUpdateReq) (*OrderUpdateResp, error)
	// 删除订单
	OrderDelete(context.Context, *OrderDeleteReq) (*OrderDeleteResp, error)
	// 订单详情
	OrderInfo(context.Context, *OrderInfoReq) (*OrderInfoResp, error)
	// 添加退货原因
	ReturnReasonAdd(context.Context, *ReturnReasonAddReq) (*ReturnReasonAddResp, error)
	// 更新退货原因
	ReturnReasonUpdate(context.Context, *ReturnReasonUpdateReq) (*ReturnReasonUpdateResp, error)
	// 退货原因列表
	ReturnReasonList(context.Context, *ReturnReasonListReq) (*ReturnReasonListResp, error)
	// 删除退货原因
	ReturnReasonDelete(context.Context, *ReturnReasonDeleteReq) (*ReturnReasonDeleteResp, error)
	// 添加退货
	ReturnApplyAdd(context.Context, *ReturnApplyAddReq) (*ReturnApplyAddResp, error)
	// 更新退货
	ReturnApplyUpdate(context.Context, *ReturnApplyUpdateReq) (*ReturnApplyUpdateResp, error)
	// 退货列表
	ReturnApplyList(context.Context, *ReturnApplyListReq) (*ReturnApplyListResp, error)
	// 删除退货
	ReturnApplyDelete(context.Context, *ReturnApplyDeleteReq) (*ReturnApplyDeleteResp, error)
	// 添加购物车
	CartAdd(context.Context, *CartAddReq) (*CartAddResp, error)
	// 更新购物车
	CartUpdate(context.Context, *CartUpdateReq) (*CartUpdateResp, error)
	// 购物车列表
	CartList(context.Context, *CartListReq) (*CartListResp, error)
	// 删除购物车
	CartDelete(context.Context, *CartDeleteReq) (*CartDeleteResp, error)
	mustEmbedUnimplementedOmsServer()
}

// UnimplementedOmsServer must be embedded to have forward compatible implementations.
type UnimplementedOmsServer struct {
}

func (UnimplementedOmsServer) OrderAdd(context.Context, *OrderAddReq) (*OrderAddResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrderAdd not implemented")
}
func (UnimplementedOmsServer) OrderList(context.Context, *OrderListReq) (*OrderListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrderList not implemented")
}
func (UnimplementedOmsServer) OrderUpdate(context.Context, *OrderUpdateReq) (*OrderUpdateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrderUpdate not implemented")
}
func (UnimplementedOmsServer) OrderDelete(context.Context, *OrderDeleteReq) (*OrderDeleteResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrderDelete not implemented")
}
func (UnimplementedOmsServer) OrderInfo(context.Context, *OrderInfoReq) (*OrderInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrderInfo not implemented")
}
func (UnimplementedOmsServer) ReturnReasonAdd(context.Context, *ReturnReasonAddReq) (*ReturnReasonAddResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReturnReasonAdd not implemented")
}
func (UnimplementedOmsServer) ReturnReasonUpdate(context.Context, *ReturnReasonUpdateReq) (*ReturnReasonUpdateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReturnReasonUpdate not implemented")
}
func (UnimplementedOmsServer) ReturnReasonList(context.Context, *ReturnReasonListReq) (*ReturnReasonListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReturnReasonList not implemented")
}
func (UnimplementedOmsServer) ReturnReasonDelete(context.Context, *ReturnReasonDeleteReq) (*ReturnReasonDeleteResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReturnReasonDelete not implemented")
}
func (UnimplementedOmsServer) ReturnApplyAdd(context.Context, *ReturnApplyAddReq) (*ReturnApplyAddResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReturnApplyAdd not implemented")
}
func (UnimplementedOmsServer) ReturnApplyUpdate(context.Context, *ReturnApplyUpdateReq) (*ReturnApplyUpdateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReturnApplyUpdate not implemented")
}
func (UnimplementedOmsServer) ReturnApplyList(context.Context, *ReturnApplyListReq) (*ReturnApplyListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReturnApplyList not implemented")
}
func (UnimplementedOmsServer) ReturnApplyDelete(context.Context, *ReturnApplyDeleteReq) (*ReturnApplyDeleteResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReturnApplyDelete not implemented")
}
func (UnimplementedOmsServer) CartAdd(context.Context, *CartAddReq) (*CartAddResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CartAdd not implemented")
}
func (UnimplementedOmsServer) CartUpdate(context.Context, *CartUpdateReq) (*CartUpdateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CartUpdate not implemented")
}
func (UnimplementedOmsServer) CartList(context.Context, *CartListReq) (*CartListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CartList not implemented")
}
func (UnimplementedOmsServer) CartDelete(context.Context, *CartDeleteReq) (*CartDeleteResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CartDelete not implemented")
}
func (UnimplementedOmsServer) mustEmbedUnimplementedOmsServer() {}

// UnsafeOmsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OmsServer will
// result in compilation errors.
type UnsafeOmsServer interface {
	mustEmbedUnimplementedOmsServer()
}

func RegisterOmsServer(s grpc.ServiceRegistrar, srv OmsServer) {
	s.RegisterService(&Oms_ServiceDesc, srv)
}

func _Oms_OrderAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderAddReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OmsServer).OrderAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Oms_OrderAdd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OmsServer).OrderAdd(ctx, req.(*OrderAddReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Oms_OrderList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OmsServer).OrderList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Oms_OrderList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OmsServer).OrderList(ctx, req.(*OrderListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Oms_OrderUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OmsServer).OrderUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Oms_OrderUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OmsServer).OrderUpdate(ctx, req.(*OrderUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Oms_OrderDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OmsServer).OrderDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Oms_OrderDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OmsServer).OrderDelete(ctx, req.(*OrderDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Oms_OrderInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OmsServer).OrderInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Oms_OrderInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OmsServer).OrderInfo(ctx, req.(*OrderInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Oms_ReturnReasonAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReturnReasonAddReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OmsServer).ReturnReasonAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Oms_ReturnReasonAdd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OmsServer).ReturnReasonAdd(ctx, req.(*ReturnReasonAddReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Oms_ReturnReasonUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReturnReasonUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OmsServer).ReturnReasonUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Oms_ReturnReasonUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OmsServer).ReturnReasonUpdate(ctx, req.(*ReturnReasonUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Oms_ReturnReasonList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReturnReasonListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OmsServer).ReturnReasonList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Oms_ReturnReasonList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OmsServer).ReturnReasonList(ctx, req.(*ReturnReasonListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Oms_ReturnReasonDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReturnReasonDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OmsServer).ReturnReasonDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Oms_ReturnReasonDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OmsServer).ReturnReasonDelete(ctx, req.(*ReturnReasonDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Oms_ReturnApplyAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReturnApplyAddReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OmsServer).ReturnApplyAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Oms_ReturnApplyAdd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OmsServer).ReturnApplyAdd(ctx, req.(*ReturnApplyAddReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Oms_ReturnApplyUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReturnApplyUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OmsServer).ReturnApplyUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Oms_ReturnApplyUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OmsServer).ReturnApplyUpdate(ctx, req.(*ReturnApplyUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Oms_ReturnApplyList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReturnApplyListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OmsServer).ReturnApplyList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Oms_ReturnApplyList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OmsServer).ReturnApplyList(ctx, req.(*ReturnApplyListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Oms_ReturnApplyDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReturnApplyDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OmsServer).ReturnApplyDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Oms_ReturnApplyDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OmsServer).ReturnApplyDelete(ctx, req.(*ReturnApplyDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Oms_CartAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CartAddReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OmsServer).CartAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Oms_CartAdd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OmsServer).CartAdd(ctx, req.(*CartAddReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Oms_CartUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CartUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OmsServer).CartUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Oms_CartUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OmsServer).CartUpdate(ctx, req.(*CartUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Oms_CartList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CartListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OmsServer).CartList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Oms_CartList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OmsServer).CartList(ctx, req.(*CartListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Oms_CartDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CartDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OmsServer).CartDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Oms_CartDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OmsServer).CartDelete(ctx, req.(*CartDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Oms_ServiceDesc is the grpc.ServiceDesc for Oms service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Oms_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "oms.Oms",
	HandlerType: (*OmsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "OrderAdd",
			Handler:    _Oms_OrderAdd_Handler,
		},
		{
			MethodName: "OrderList",
			Handler:    _Oms_OrderList_Handler,
		},
		{
			MethodName: "OrderUpdate",
			Handler:    _Oms_OrderUpdate_Handler,
		},
		{
			MethodName: "OrderDelete",
			Handler:    _Oms_OrderDelete_Handler,
		},
		{
			MethodName: "OrderInfo",
			Handler:    _Oms_OrderInfo_Handler,
		},
		{
			MethodName: "ReturnReasonAdd",
			Handler:    _Oms_ReturnReasonAdd_Handler,
		},
		{
			MethodName: "ReturnReasonUpdate",
			Handler:    _Oms_ReturnReasonUpdate_Handler,
		},
		{
			MethodName: "ReturnReasonList",
			Handler:    _Oms_ReturnReasonList_Handler,
		},
		{
			MethodName: "ReturnReasonDelete",
			Handler:    _Oms_ReturnReasonDelete_Handler,
		},
		{
			MethodName: "ReturnApplyAdd",
			Handler:    _Oms_ReturnApplyAdd_Handler,
		},
		{
			MethodName: "ReturnApplyUpdate",
			Handler:    _Oms_ReturnApplyUpdate_Handler,
		},
		{
			MethodName: "ReturnApplyList",
			Handler:    _Oms_ReturnApplyList_Handler,
		},
		{
			MethodName: "ReturnApplyDelete",
			Handler:    _Oms_ReturnApplyDelete_Handler,
		},
		{
			MethodName: "CartAdd",
			Handler:    _Oms_CartAdd_Handler,
		},
		{
			MethodName: "CartUpdate",
			Handler:    _Oms_CartUpdate_Handler,
		},
		{
			MethodName: "CartList",
			Handler:    _Oms_CartList_Handler,
		},
		{
			MethodName: "CartDelete",
			Handler:    _Oms_CartDelete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "oms.proto",
}
