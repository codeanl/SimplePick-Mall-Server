// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: sms.proto

package sms

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Sms_HomeAdvertiseAdd_FullMethodName     = "/sms.Sms/HomeAdvertiseAdd"
	Sms_HomeAdvertiseList_FullMethodName    = "/sms.Sms/HomeAdvertiseList"
	Sms_HomeAdvertiseUpdate_FullMethodName  = "/sms.Sms/HomeAdvertiseUpdate"
	Sms_HomeAdvertiseDelete_FullMethodName  = "/sms.Sms/HomeAdvertiseDelete"
	Sms_CouponAdd_FullMethodName            = "/sms.Sms/CouponAdd"
	Sms_CouponUpdate_FullMethodName         = "/sms.Sms/CouponUpdate"
	Sms_CouponDelete_FullMethodName         = "/sms.Sms/CouponDelete"
	Sms_CouponList_FullMethodName           = "/sms.Sms/CouponList"
	Sms_HotRecommendAdd_FullMethodName      = "/sms.Sms/HotRecommendAdd"
	Sms_HotRecommendList_FullMethodName     = "/sms.Sms/HotRecommendList"
	Sms_HotRecommendUpdate_FullMethodName   = "/sms.Sms/HotRecommendUpdate"
	Sms_HotRecommendDelete_FullMethodName   = "/sms.Sms/HotRecommendDelete"
	Sms_SubjectAdd_FullMethodName           = "/sms.Sms/SubjectAdd"
	Sms_SubjectUpdate_FullMethodName        = "/sms.Sms/SubjectUpdate"
	Sms_SubjectDelete_FullMethodName        = "/sms.Sms/SubjectDelete"
	Sms_SubjectList_FullMethodName          = "/sms.Sms/SubjectList"
	Sms_SubjectProductAdd_FullMethodName    = "/sms.Sms/SubjectProductAdd"
	Sms_SubjectProductUpdate_FullMethodName = "/sms.Sms/SubjectProductUpdate"
	Sms_SubjectProductDelete_FullMethodName = "/sms.Sms/SubjectProductDelete"
	Sms_SubjectProductList_FullMethodName   = "/sms.Sms/SubjectProductList"
)

// SmsClient is the client API for Sms service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SmsClient interface {
	// 添加广告
	HomeAdvertiseAdd(ctx context.Context, in *HomeAdvertiseAddReq, opts ...grpc.CallOption) (*HomeAdvertiseAddResp, error)
	// 广告列表
	HomeAdvertiseList(ctx context.Context, in *HomeAdvertiseListReq, opts ...grpc.CallOption) (*HomeAdvertiseListResp, error)
	// 更新广告
	HomeAdvertiseUpdate(ctx context.Context, in *HomeAdvertiseUpdateReq, opts ...grpc.CallOption) (*HomeAdvertiseUpdateResp, error)
	// 删除广告
	HomeAdvertiseDelete(ctx context.Context, in *HomeAdvertiseDeleteReq, opts ...grpc.CallOption) (*HomeAdvertiseDeleteResp, error)
	// 添加优惠券
	CouponAdd(ctx context.Context, in *CouponAddReq, opts ...grpc.CallOption) (*CouponAddResp, error)
	// 更新优惠券
	CouponUpdate(ctx context.Context, in *CouponUpdateReq, opts ...grpc.CallOption) (*CouponUpdateResp, error)
	// 删除优惠券
	CouponDelete(ctx context.Context, in *CouponDeleteReq, opts ...grpc.CallOption) (*CouponDeleteResp, error)
	// 优惠券列表
	CouponList(ctx context.Context, in *CouponListReq, opts ...grpc.CallOption) (*CouponListResp, error)
	// 添加推荐
	HotRecommendAdd(ctx context.Context, in *HotRecommendAddReq, opts ...grpc.CallOption) (*HotRecommendAddResp, error)
	// 推荐列表
	HotRecommendList(ctx context.Context, in *HotRecommendListReq, opts ...grpc.CallOption) (*HotRecommendListResp, error)
	// 更新推荐
	HotRecommendUpdate(ctx context.Context, in *HotRecommendUpdateReq, opts ...grpc.CallOption) (*HotRecommendUpdateResp, error)
	// 删除推荐
	HotRecommendDelete(ctx context.Context, in *HotRecommendDeleteReq, opts ...grpc.CallOption) (*HotRecommendDeleteResp, error)
	// 添加专题
	SubjectAdd(ctx context.Context, in *SubjectAddReq, opts ...grpc.CallOption) (*SubjectAddResp, error)
	// 更新专题
	SubjectUpdate(ctx context.Context, in *SubjectUpdateReq, opts ...grpc.CallOption) (*SubjectUpdateResp, error)
	// 删除专题
	SubjectDelete(ctx context.Context, in *SubjectDeleteAddReq, opts ...grpc.CallOption) (*SubjectDeleteResp, error)
	// 专题列表
	SubjectList(ctx context.Context, in *SubjectListReq, opts ...grpc.CallOption) (*SubjectListResp, error)
	// 添加专题商品
	SubjectProductAdd(ctx context.Context, in *SubjectProductAddReq, opts ...grpc.CallOption) (*SubjectProductAddResp, error)
	// 更新专题商品
	SubjectProductUpdate(ctx context.Context, in *SubjectProductUpdateReq, opts ...grpc.CallOption) (*SubjectProductUpdateResp, error)
	// 删除专题商品
	SubjectProductDelete(ctx context.Context, in *SubjectProductDeleteAddReq, opts ...grpc.CallOption) (*SubjectProductDeleteResp, error)
	// 专题列表商品
	SubjectProductList(ctx context.Context, in *SubjectProductListReq, opts ...grpc.CallOption) (*SubjectProductListResp, error)
}

type smsClient struct {
	cc grpc.ClientConnInterface
}

func NewSmsClient(cc grpc.ClientConnInterface) SmsClient {
	return &smsClient{cc}
}

func (c *smsClient) HomeAdvertiseAdd(ctx context.Context, in *HomeAdvertiseAddReq, opts ...grpc.CallOption) (*HomeAdvertiseAddResp, error) {
	out := new(HomeAdvertiseAddResp)
	err := c.cc.Invoke(ctx, Sms_HomeAdvertiseAdd_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *smsClient) HomeAdvertiseList(ctx context.Context, in *HomeAdvertiseListReq, opts ...grpc.CallOption) (*HomeAdvertiseListResp, error) {
	out := new(HomeAdvertiseListResp)
	err := c.cc.Invoke(ctx, Sms_HomeAdvertiseList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *smsClient) HomeAdvertiseUpdate(ctx context.Context, in *HomeAdvertiseUpdateReq, opts ...grpc.CallOption) (*HomeAdvertiseUpdateResp, error) {
	out := new(HomeAdvertiseUpdateResp)
	err := c.cc.Invoke(ctx, Sms_HomeAdvertiseUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *smsClient) HomeAdvertiseDelete(ctx context.Context, in *HomeAdvertiseDeleteReq, opts ...grpc.CallOption) (*HomeAdvertiseDeleteResp, error) {
	out := new(HomeAdvertiseDeleteResp)
	err := c.cc.Invoke(ctx, Sms_HomeAdvertiseDelete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *smsClient) CouponAdd(ctx context.Context, in *CouponAddReq, opts ...grpc.CallOption) (*CouponAddResp, error) {
	out := new(CouponAddResp)
	err := c.cc.Invoke(ctx, Sms_CouponAdd_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *smsClient) CouponUpdate(ctx context.Context, in *CouponUpdateReq, opts ...grpc.CallOption) (*CouponUpdateResp, error) {
	out := new(CouponUpdateResp)
	err := c.cc.Invoke(ctx, Sms_CouponUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *smsClient) CouponDelete(ctx context.Context, in *CouponDeleteReq, opts ...grpc.CallOption) (*CouponDeleteResp, error) {
	out := new(CouponDeleteResp)
	err := c.cc.Invoke(ctx, Sms_CouponDelete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *smsClient) CouponList(ctx context.Context, in *CouponListReq, opts ...grpc.CallOption) (*CouponListResp, error) {
	out := new(CouponListResp)
	err := c.cc.Invoke(ctx, Sms_CouponList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *smsClient) HotRecommendAdd(ctx context.Context, in *HotRecommendAddReq, opts ...grpc.CallOption) (*HotRecommendAddResp, error) {
	out := new(HotRecommendAddResp)
	err := c.cc.Invoke(ctx, Sms_HotRecommendAdd_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *smsClient) HotRecommendList(ctx context.Context, in *HotRecommendListReq, opts ...grpc.CallOption) (*HotRecommendListResp, error) {
	out := new(HotRecommendListResp)
	err := c.cc.Invoke(ctx, Sms_HotRecommendList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *smsClient) HotRecommendUpdate(ctx context.Context, in *HotRecommendUpdateReq, opts ...grpc.CallOption) (*HotRecommendUpdateResp, error) {
	out := new(HotRecommendUpdateResp)
	err := c.cc.Invoke(ctx, Sms_HotRecommendUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *smsClient) HotRecommendDelete(ctx context.Context, in *HotRecommendDeleteReq, opts ...grpc.CallOption) (*HotRecommendDeleteResp, error) {
	out := new(HotRecommendDeleteResp)
	err := c.cc.Invoke(ctx, Sms_HotRecommendDelete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *smsClient) SubjectAdd(ctx context.Context, in *SubjectAddReq, opts ...grpc.CallOption) (*SubjectAddResp, error) {
	out := new(SubjectAddResp)
	err := c.cc.Invoke(ctx, Sms_SubjectAdd_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *smsClient) SubjectUpdate(ctx context.Context, in *SubjectUpdateReq, opts ...grpc.CallOption) (*SubjectUpdateResp, error) {
	out := new(SubjectUpdateResp)
	err := c.cc.Invoke(ctx, Sms_SubjectUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *smsClient) SubjectDelete(ctx context.Context, in *SubjectDeleteAddReq, opts ...grpc.CallOption) (*SubjectDeleteResp, error) {
	out := new(SubjectDeleteResp)
	err := c.cc.Invoke(ctx, Sms_SubjectDelete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *smsClient) SubjectList(ctx context.Context, in *SubjectListReq, opts ...grpc.CallOption) (*SubjectListResp, error) {
	out := new(SubjectListResp)
	err := c.cc.Invoke(ctx, Sms_SubjectList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *smsClient) SubjectProductAdd(ctx context.Context, in *SubjectProductAddReq, opts ...grpc.CallOption) (*SubjectProductAddResp, error) {
	out := new(SubjectProductAddResp)
	err := c.cc.Invoke(ctx, Sms_SubjectProductAdd_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *smsClient) SubjectProductUpdate(ctx context.Context, in *SubjectProductUpdateReq, opts ...grpc.CallOption) (*SubjectProductUpdateResp, error) {
	out := new(SubjectProductUpdateResp)
	err := c.cc.Invoke(ctx, Sms_SubjectProductUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *smsClient) SubjectProductDelete(ctx context.Context, in *SubjectProductDeleteAddReq, opts ...grpc.CallOption) (*SubjectProductDeleteResp, error) {
	out := new(SubjectProductDeleteResp)
	err := c.cc.Invoke(ctx, Sms_SubjectProductDelete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *smsClient) SubjectProductList(ctx context.Context, in *SubjectProductListReq, opts ...grpc.CallOption) (*SubjectProductListResp, error) {
	out := new(SubjectProductListResp)
	err := c.cc.Invoke(ctx, Sms_SubjectProductList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SmsServer is the server API for Sms service.
// All implementations must embed UnimplementedSmsServer
// for forward compatibility
type SmsServer interface {
	// 添加广告
	HomeAdvertiseAdd(context.Context, *HomeAdvertiseAddReq) (*HomeAdvertiseAddResp, error)
	// 广告列表
	HomeAdvertiseList(context.Context, *HomeAdvertiseListReq) (*HomeAdvertiseListResp, error)
	// 更新广告
	HomeAdvertiseUpdate(context.Context, *HomeAdvertiseUpdateReq) (*HomeAdvertiseUpdateResp, error)
	// 删除广告
	HomeAdvertiseDelete(context.Context, *HomeAdvertiseDeleteReq) (*HomeAdvertiseDeleteResp, error)
	// 添加优惠券
	CouponAdd(context.Context, *CouponAddReq) (*CouponAddResp, error)
	// 更新优惠券
	CouponUpdate(context.Context, *CouponUpdateReq) (*CouponUpdateResp, error)
	// 删除优惠券
	CouponDelete(context.Context, *CouponDeleteReq) (*CouponDeleteResp, error)
	// 优惠券列表
	CouponList(context.Context, *CouponListReq) (*CouponListResp, error)
	// 添加推荐
	HotRecommendAdd(context.Context, *HotRecommendAddReq) (*HotRecommendAddResp, error)
	// 推荐列表
	HotRecommendList(context.Context, *HotRecommendListReq) (*HotRecommendListResp, error)
	// 更新推荐
	HotRecommendUpdate(context.Context, *HotRecommendUpdateReq) (*HotRecommendUpdateResp, error)
	// 删除推荐
	HotRecommendDelete(context.Context, *HotRecommendDeleteReq) (*HotRecommendDeleteResp, error)
	// 添加专题
	SubjectAdd(context.Context, *SubjectAddReq) (*SubjectAddResp, error)
	// 更新专题
	SubjectUpdate(context.Context, *SubjectUpdateReq) (*SubjectUpdateResp, error)
	// 删除专题
	SubjectDelete(context.Context, *SubjectDeleteAddReq) (*SubjectDeleteResp, error)
	// 专题列表
	SubjectList(context.Context, *SubjectListReq) (*SubjectListResp, error)
	// 添加专题商品
	SubjectProductAdd(context.Context, *SubjectProductAddReq) (*SubjectProductAddResp, error)
	// 更新专题商品
	SubjectProductUpdate(context.Context, *SubjectProductUpdateReq) (*SubjectProductUpdateResp, error)
	// 删除专题商品
	SubjectProductDelete(context.Context, *SubjectProductDeleteAddReq) (*SubjectProductDeleteResp, error)
	// 专题列表商品
	SubjectProductList(context.Context, *SubjectProductListReq) (*SubjectProductListResp, error)
	mustEmbedUnimplementedSmsServer()
}

// UnimplementedSmsServer must be embedded to have forward compatible implementations.
type UnimplementedSmsServer struct {
}

func (UnimplementedSmsServer) HomeAdvertiseAdd(context.Context, *HomeAdvertiseAddReq) (*HomeAdvertiseAddResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HomeAdvertiseAdd not implemented")
}
func (UnimplementedSmsServer) HomeAdvertiseList(context.Context, *HomeAdvertiseListReq) (*HomeAdvertiseListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HomeAdvertiseList not implemented")
}
func (UnimplementedSmsServer) HomeAdvertiseUpdate(context.Context, *HomeAdvertiseUpdateReq) (*HomeAdvertiseUpdateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HomeAdvertiseUpdate not implemented")
}
func (UnimplementedSmsServer) HomeAdvertiseDelete(context.Context, *HomeAdvertiseDeleteReq) (*HomeAdvertiseDeleteResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HomeAdvertiseDelete not implemented")
}
func (UnimplementedSmsServer) CouponAdd(context.Context, *CouponAddReq) (*CouponAddResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CouponAdd not implemented")
}
func (UnimplementedSmsServer) CouponUpdate(context.Context, *CouponUpdateReq) (*CouponUpdateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CouponUpdate not implemented")
}
func (UnimplementedSmsServer) CouponDelete(context.Context, *CouponDeleteReq) (*CouponDeleteResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CouponDelete not implemented")
}
func (UnimplementedSmsServer) CouponList(context.Context, *CouponListReq) (*CouponListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CouponList not implemented")
}
func (UnimplementedSmsServer) HotRecommendAdd(context.Context, *HotRecommendAddReq) (*HotRecommendAddResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HotRecommendAdd not implemented")
}
func (UnimplementedSmsServer) HotRecommendList(context.Context, *HotRecommendListReq) (*HotRecommendListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HotRecommendList not implemented")
}
func (UnimplementedSmsServer) HotRecommendUpdate(context.Context, *HotRecommendUpdateReq) (*HotRecommendUpdateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HotRecommendUpdate not implemented")
}
func (UnimplementedSmsServer) HotRecommendDelete(context.Context, *HotRecommendDeleteReq) (*HotRecommendDeleteResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HotRecommendDelete not implemented")
}
func (UnimplementedSmsServer) SubjectAdd(context.Context, *SubjectAddReq) (*SubjectAddResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubjectAdd not implemented")
}
func (UnimplementedSmsServer) SubjectUpdate(context.Context, *SubjectUpdateReq) (*SubjectUpdateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubjectUpdate not implemented")
}
func (UnimplementedSmsServer) SubjectDelete(context.Context, *SubjectDeleteAddReq) (*SubjectDeleteResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubjectDelete not implemented")
}
func (UnimplementedSmsServer) SubjectList(context.Context, *SubjectListReq) (*SubjectListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubjectList not implemented")
}
func (UnimplementedSmsServer) SubjectProductAdd(context.Context, *SubjectProductAddReq) (*SubjectProductAddResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubjectProductAdd not implemented")
}
func (UnimplementedSmsServer) SubjectProductUpdate(context.Context, *SubjectProductUpdateReq) (*SubjectProductUpdateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubjectProductUpdate not implemented")
}
func (UnimplementedSmsServer) SubjectProductDelete(context.Context, *SubjectProductDeleteAddReq) (*SubjectProductDeleteResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubjectProductDelete not implemented")
}
func (UnimplementedSmsServer) SubjectProductList(context.Context, *SubjectProductListReq) (*SubjectProductListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubjectProductList not implemented")
}
func (UnimplementedSmsServer) mustEmbedUnimplementedSmsServer() {}

// UnsafeSmsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SmsServer will
// result in compilation errors.
type UnsafeSmsServer interface {
	mustEmbedUnimplementedSmsServer()
}

func RegisterSmsServer(s grpc.ServiceRegistrar, srv SmsServer) {
	s.RegisterService(&Sms_ServiceDesc, srv)
}

func _Sms_HomeAdvertiseAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HomeAdvertiseAddReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SmsServer).HomeAdvertiseAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Sms_HomeAdvertiseAdd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SmsServer).HomeAdvertiseAdd(ctx, req.(*HomeAdvertiseAddReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sms_HomeAdvertiseList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HomeAdvertiseListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SmsServer).HomeAdvertiseList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Sms_HomeAdvertiseList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SmsServer).HomeAdvertiseList(ctx, req.(*HomeAdvertiseListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sms_HomeAdvertiseUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HomeAdvertiseUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SmsServer).HomeAdvertiseUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Sms_HomeAdvertiseUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SmsServer).HomeAdvertiseUpdate(ctx, req.(*HomeAdvertiseUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sms_HomeAdvertiseDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HomeAdvertiseDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SmsServer).HomeAdvertiseDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Sms_HomeAdvertiseDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SmsServer).HomeAdvertiseDelete(ctx, req.(*HomeAdvertiseDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sms_CouponAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CouponAddReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SmsServer).CouponAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Sms_CouponAdd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SmsServer).CouponAdd(ctx, req.(*CouponAddReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sms_CouponUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CouponUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SmsServer).CouponUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Sms_CouponUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SmsServer).CouponUpdate(ctx, req.(*CouponUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sms_CouponDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CouponDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SmsServer).CouponDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Sms_CouponDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SmsServer).CouponDelete(ctx, req.(*CouponDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sms_CouponList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CouponListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SmsServer).CouponList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Sms_CouponList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SmsServer).CouponList(ctx, req.(*CouponListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sms_HotRecommendAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HotRecommendAddReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SmsServer).HotRecommendAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Sms_HotRecommendAdd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SmsServer).HotRecommendAdd(ctx, req.(*HotRecommendAddReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sms_HotRecommendList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HotRecommendListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SmsServer).HotRecommendList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Sms_HotRecommendList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SmsServer).HotRecommendList(ctx, req.(*HotRecommendListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sms_HotRecommendUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HotRecommendUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SmsServer).HotRecommendUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Sms_HotRecommendUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SmsServer).HotRecommendUpdate(ctx, req.(*HotRecommendUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sms_HotRecommendDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HotRecommendDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SmsServer).HotRecommendDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Sms_HotRecommendDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SmsServer).HotRecommendDelete(ctx, req.(*HotRecommendDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sms_SubjectAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubjectAddReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SmsServer).SubjectAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Sms_SubjectAdd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SmsServer).SubjectAdd(ctx, req.(*SubjectAddReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sms_SubjectUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubjectUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SmsServer).SubjectUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Sms_SubjectUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SmsServer).SubjectUpdate(ctx, req.(*SubjectUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sms_SubjectDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubjectDeleteAddReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SmsServer).SubjectDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Sms_SubjectDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SmsServer).SubjectDelete(ctx, req.(*SubjectDeleteAddReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sms_SubjectList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubjectListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SmsServer).SubjectList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Sms_SubjectList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SmsServer).SubjectList(ctx, req.(*SubjectListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sms_SubjectProductAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubjectProductAddReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SmsServer).SubjectProductAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Sms_SubjectProductAdd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SmsServer).SubjectProductAdd(ctx, req.(*SubjectProductAddReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sms_SubjectProductUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubjectProductUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SmsServer).SubjectProductUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Sms_SubjectProductUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SmsServer).SubjectProductUpdate(ctx, req.(*SubjectProductUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sms_SubjectProductDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubjectProductDeleteAddReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SmsServer).SubjectProductDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Sms_SubjectProductDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SmsServer).SubjectProductDelete(ctx, req.(*SubjectProductDeleteAddReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sms_SubjectProductList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubjectProductListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SmsServer).SubjectProductList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Sms_SubjectProductList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SmsServer).SubjectProductList(ctx, req.(*SubjectProductListReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Sms_ServiceDesc is the grpc.ServiceDesc for Sms service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Sms_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sms.Sms",
	HandlerType: (*SmsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HomeAdvertiseAdd",
			Handler:    _Sms_HomeAdvertiseAdd_Handler,
		},
		{
			MethodName: "HomeAdvertiseList",
			Handler:    _Sms_HomeAdvertiseList_Handler,
		},
		{
			MethodName: "HomeAdvertiseUpdate",
			Handler:    _Sms_HomeAdvertiseUpdate_Handler,
		},
		{
			MethodName: "HomeAdvertiseDelete",
			Handler:    _Sms_HomeAdvertiseDelete_Handler,
		},
		{
			MethodName: "CouponAdd",
			Handler:    _Sms_CouponAdd_Handler,
		},
		{
			MethodName: "CouponUpdate",
			Handler:    _Sms_CouponUpdate_Handler,
		},
		{
			MethodName: "CouponDelete",
			Handler:    _Sms_CouponDelete_Handler,
		},
		{
			MethodName: "CouponList",
			Handler:    _Sms_CouponList_Handler,
		},
		{
			MethodName: "HotRecommendAdd",
			Handler:    _Sms_HotRecommendAdd_Handler,
		},
		{
			MethodName: "HotRecommendList",
			Handler:    _Sms_HotRecommendList_Handler,
		},
		{
			MethodName: "HotRecommendUpdate",
			Handler:    _Sms_HotRecommendUpdate_Handler,
		},
		{
			MethodName: "HotRecommendDelete",
			Handler:    _Sms_HotRecommendDelete_Handler,
		},
		{
			MethodName: "SubjectAdd",
			Handler:    _Sms_SubjectAdd_Handler,
		},
		{
			MethodName: "SubjectUpdate",
			Handler:    _Sms_SubjectUpdate_Handler,
		},
		{
			MethodName: "SubjectDelete",
			Handler:    _Sms_SubjectDelete_Handler,
		},
		{
			MethodName: "SubjectList",
			Handler:    _Sms_SubjectList_Handler,
		},
		{
			MethodName: "SubjectProductAdd",
			Handler:    _Sms_SubjectProductAdd_Handler,
		},
		{
			MethodName: "SubjectProductUpdate",
			Handler:    _Sms_SubjectProductUpdate_Handler,
		},
		{
			MethodName: "SubjectProductDelete",
			Handler:    _Sms_SubjectProductDelete_Handler,
		},
		{
			MethodName: "SubjectProductList",
			Handler:    _Sms_SubjectProductList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sms.proto",
}
